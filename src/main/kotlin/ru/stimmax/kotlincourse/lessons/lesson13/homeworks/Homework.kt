package org.example.ru.stimmax.kotlincourse.lessons.lesson13.homeworks

fun main() {

    //1. Дан словарь с именем и временем выполнения каждого автоматизированного теста в секундах.
    // Определите среднее время выполнения теста.
    var map1 = mutableMapOf("t1" to 1.1, "t2" to 2.3, "t3" to 4.5)
    var time: Double = 0.0
    map1.forEach { time = time + it.value }
    val timeAvg = time / map1.size

    map1.values.average();

    //2. Имеется словарь с метаданными автоматизированных тестов, где ключи — это имена тестовых методов а значения - строка с метаданными.
    //  Выведите список всех тестовых методов.
    val map2 = mapOf("qwe" to "qwe,qwe,qwe")
    map2.forEach {
        println(it.key)
    }

    println(map2.keys)

    //3. В изменяемый словарь с данными о прохождении тестов добавьте новый тест и его результат.
    map1["t4"] = 5.5

    //4. Посчитайте количество успешных тестов
    // в словаре с результатами (ключ - название, значение - результат из passed, failed, skipped).
    val map4 = mapOf("t1" to "passed")
    map4.filter { it.value == "passed" }.count()

    //5. Удалите из изменяемого словаря с баг-трекингом запись о баге,
    // который был исправлен (ключ - название, значение - статус исправления).
    val map5 = mutableMapOf("bug" to "fixed")
    map5.remove("bug", "fixed")

    //6. Для словаря с результатами тестирования веб-страниц (ключ — URL страницы, значение — статус ответа),
    // выведите сообщение о странице и статусе её проверки
    val map6 = mapOf("https://" to 200)
    println(map6.map { "${it.key} - ${it.value}" })

    //7. Найдите в словаре с названием и временем ответа сервисов только те, время ответа которых превышает заданный порог.
    val map7 = mapOf("request" to 12.2)
    map7.filterValues { it > 30.0}

    //8. В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в виде строки).
// Для указанного endpoint найдите статус ответа, если endpoint отсутствует, предположите, что он не был протестирован.
    val map8 = mapOf("enpoint" to 200)
    map8.getOrElse("enpoint1") {
        println("не протестирован")
    }

    //9. Из словаря, содержащего конфигурации тестового окружения
// (ключ — название параметра конфигурации, значение - сама конфигурация),
// получите значение для "browserType". Ответ не может быть null.
    val map9 = mapOf("browserType" to "Chrome")
    val v = map9["browserType"]
    map9.getValue("browserType")

    //10. Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО, добавив новую версию.
    val map10 = mapOf("po" to "1.0")
    val map10Copy = map10 + ("po" to "1.1")

    //11. Используя словарь с настройками тестирования для различных мобильных устройств
// (ключ — модель устройства, значение - строка с настройками),
// получите настройки для конкретной модели или верните настройки по умолчанию.
    val map11 = mapOf("Samsung A51" to "conf")
    map11.getOrDefault("Samsung S24 Ultra", "conf1")

    //12. Проверьте, содержит ли словарь с ошибками тестирования
// (ключ - код ошибки, значение - описание ошибки) определенный код ошибки.
    val map12 = mapOf(404 to "Not found")
    map12.contains(500)

    //13. Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев в формате "TestID_Version",
// а значения — статусы выполнения этих тестов ("Passed", "Failed", "Skipped").
// Отфильтруйте словарь, оставив только те сценарии,
// идентификаторы которых соответствуют определённой версии тестов, то-есть в ключе содержится требуемая версия.
    val map13 = mapOf("TestID_Version0" to "Passed")
    map13.filterKeys { it.contains("Version1") }

    //14. У вас есть словарь, где ключи — это названия функциональных модулей приложения,
// а значения — результаты их тестирования.
// Проверьте, есть ли модули с неудачным тестированием.
    val map14 = mapOf("mod" to "fail")
    map14.containsValue("fail")

    //15. Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.
    var map15 = mutableMapOf("IPhone16" to "conf2")
    map15.putAll(mapOf("IPhone16 Pro" to "conf3"))

    //16. Объедините два неизменяемых словаря с данными о багах.
    val map16 = mapOf("bug1" to "link1")
    val map16Res = map16 + mapOf("bug2" to "link2")

    //17. Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.
    var map17 = mutableMapOf("run 10.10.2025" to 300.05)
    map17.clear()

    //18. Исключите из отчета по автоматизированному тестированию те случаи,
// где тесты были пропущены (имеют статус “skipped”). Ключи - название теста, значения - статус.
    var map18 = mutableMapOf("t1" to "skipped")
    val map18Skipped = map18.filterNot { it.value == "skipped" }
    val map18Res = map18 - map18Skipped

    //19. Создайте копию словаря с конфигурациями тестирования удалив из него несколько конфигураций.
    val map19 = mapOf("conf1" to "settings1")
    val map19Res = map19 - listOf("conf2", "conf3")

    //20. Создайте отчет о тестировании, преобразовав словарь с результатами тестирования
// (ключ — идентификатор теста, значение — результат)
// в список строк формата "Test ID: результат".
    val map20 = mapOf("ID" to "fail")
    val l: List<String> = map20.map({ "Тест ${it.key}: $it.value" })

    //21. Преобразуйте изменяемый словарь с результатами последнего тестирования в неизменяемый для архивации.
    var map21M = mutableMapOf("date" to "res")
    val map21 = map21M.toMap()

    //22. Преобразуйте словарь, содержащий числовой ID теста и данные о времени выполнения тестов,
// заменив идентификаторы тестов на их строковый аналог (например через toString()).
    val map22 = mapOf(12 to 22.20)
    map22.mapKeys { it.key.toString() }

    //23. Для словаря с оценками производительности различных версий приложения
// (ключи - строковая версия, значения - дробное число времени ответа сервера)
// увеличьте каждую оценку на 10%, чтобы учесть новые условия тестирования.
    val map23 = mapOf("version1" to 45.55)
    map23.mapValues { it.value * 1.1 }

    //24. Проверьте, пуст ли словарь с ошибками компиляции тестов.
    val map24 = mapOf ("" to "")
    map24.isEmpty()

    //25. Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.
    map24.isNotEmpty()

    //26. Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.
    map24.all{ it.value == "passed"}

    //27. Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.
    map24.any{ it.value == "fail"}

    //28. Отфильтруйте словарь с результатами тестирования сервисов,
// оставив только те тесты, которые не прошли успешно и содержат в названии “optional”.
    map24.filterValues { it == "fail" || it == "optional"}

}