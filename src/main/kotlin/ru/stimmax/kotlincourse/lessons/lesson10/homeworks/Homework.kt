package org.example.ru.stimmax.kotlincourse.lessons.lesson10.homeworks

fun main() {
    //1. Создайте пустой неизменяемый словарь, где ключи и значения - целые числа.
    val emptyMap = mapOf<Int, Int>()

    //2. Создайте словарь, инициализированный несколькими парами "ключ-значение", где ключи - float, а значения - double
    val map2 = mapOf(1.0f to 1.1, 1.2f to 1.23)

    //3. Создайте изменяемый словарь, где ключи - целые числа, а значения - строки.
    val map3 = mutableMapOf<Int, String>()

    //4. Имея изменяемый словарь, добавьте в него новые пары "ключ-значение".
    map3[1]="odin"
    map3[3]="tri"

    //5. Используя словарь из предыдущего задания, извлеките значение, используя ключ.
    // Попробуй получить значение с ключом, которого в словаре нет.
    println("Задание 5")
    println(map3[1])
    println(map3[2])
    println()

    //6. Удалите определенный элемент из изменяемого словаря по его ключу.
    map3.remove(1)

    //7. Создайте словарь (ключи Double, значения Int) и выведи в цикле результат деления ключа на значение.
    // Не забудь обработать деление на 0 (в этом случае выведи слово “бесконечность”)
    println("Задание 7")
    val map7 = mapOf(1.1 to 5, 7.0 to 0, 3.0 to 9)
    for((d, i) in map7) {
        if (i==0) {
            println("Infinity")
        } else {
            println(i / d)
        }
    }
    println()

    //8. Измените значение для существующего ключа в изменяемом словаре.
    map3[3]="three"

    //9. Создайте два словаря и объедините их в третьем изменяемом словаре через циклы.
    println("Задание 9")
    val map91 = mapOf(1 to "a", 2 to "b")
    val map92 = mapOf(2 to "c", 4 to "d")
    val map9res = mutableMapOf<Int, String>()
    for ((i,s) in map91) {
        map9res[i] = s
    }
    for ((i,s) in map92) {
        map9res[i] = s
    }
    println(map9res)
    println()

    //10. Создайте словарь, где ключами являются строки,
    // а значениями - списки целых чисел. Добавьте несколько элементов в этот словарь.
    val map10 = mutableMapOf<String, List<Int>>()
    map10["one"] = listOf<Int>(1,11,111)
    map10["two"] = listOf<Int>(2,22,222)

    //11. Создай словарь, в котором ключи - это целые числа, а значения - изменяемые множества строк.
    // Добавь данные в словарь. Получи значение по ключу (это должно быть множество строк) и добавь в это множество ещё строку.
    // Распечатай полученное множество.
    val map11 = mapOf(1 to mutableSetOf("qqq","www"))
    map11[1]?.add("eee")

    //12. Создай словарь, где ключами будут пары чисел.
    // Через перебор найди значение у которого пара будет содержать цифру 5 в качестве первого или второго значения.
    println("Задание 12")
    val map12 = mapOf((1 to 2) to "val",
        (2 to 5) to "lav")
    for ((p, s) in map12){
        if (p.first==5 || p.second==5) {println("$p, $s")}
     }
    println()

    //Словарь библиотека: Ключи - автор книги, значения - список книг
    val library = mapOf<String, List<String>>()

    //Справочник растений: Ключи - типы растений (например, "Цветы", "Деревья"), значения - списки названий растений
    val plants = mutableMapOf<String, MutableList<String>>()

    //Четвертьфинала: Ключи - названия спортивных команд, значения - списки игроков каждой команды
    val teams = mapOf<String, MutableList<String>>()

    //Курс лечения: Ключи - даты, значения - список препаратов принимаемых в дату
    val cure = mapOf<String, MutableList<String>>()

    //Словарь путешественника: Ключи - страны, значения - словари из городов со списком интересных мест.
    val mustSee = mutableMapOf<String, MutableMap<String, MutableList<String>>>()
}
